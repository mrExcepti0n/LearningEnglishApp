@using LearningEnglishWeb.ViewModels.Vocabulary
@model UserVocabularyViewModel
@{
    ViewData["Title"] = "Vocabulare Page";
}

<div class="row justify-content-center">
    <div class="col-xl-8 col-sm-12 mb-3 mt-3">
        <div id="carouselExampleControls" class="carousel slide" data-ride="carousel">
            <div class="carousel-inner text-center">

                @for (var i = 0; i < Model.UserVocabularies.Count(); i += 3)
                {
                    <div class="carousel-item @(i == 0 ? "active" : "")  ">
                        @for (var j = i; j < i + 3; j++)
                        {
                            <div class="card d-inline-block" style="width: 12rem;">
                                <div class="card-header"> @Model.UserVocabularies[j].Title</div>
                                <div class="card-body"> <a href="#">  количество слов @Model.UserVocabularies[j].WordsCount </a> </div>
                            </div>
                            }
                    </div>
                }
            </div>


            <a class="carousel-control-prev" href="#carouselExampleControls" role="button" data-slide="prev">
                <span class="text-dark carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="sr-only">Previous</span>
            </a>
            <a class="carousel-control-next" href="#carouselExampleControls" role="button" data-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="sr-only">Next</span>
            </a>
        </div>

        @*<div id="carouselExampleControls" class="carousel slide" data-ride="carousel">
                <div class="carousel-inner">
                    @foreach (var userWord in Model.UserVocabularies)
                    {
                        <div class="carousel-item active">
                            <div class="d-inline-block"> @userWord.Title </div>
                        </div>
                    }
                </div>
            </div>
            <a class="carousel-control-prev" href="#carouselExampleControls" role="button" data-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="sr-only">Previous</span>
            </a>
            <a class="carousel-control-next" href="#carouselExampleControls" role="button" data-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="sr-only">Next</span>
            </a>*@
    </div>
</div>


<div class="row justify-content-center">
    <div class="col-xl-8 col-sm-12">
        <div class="form-group">
            <input id="find-input" type="text" placeholder="Введите слово" class="form-control" />
            <button class="btn btn-success float-right m-2 add-word-button" type="button"> добавить </button>
        </div>

        <div id="available-words" class="w-50 m-2 text-center shadow-lg p-3 mb-5 bg-white rounded d-none">
        </div>
    </div>
    <div id="partial" class="col-xl-8 col-sm-12">
        @await Html.PartialAsync("WordList", Model.UserWords)
    </div>
</div>




<template id="addOwnWordTemplate">
    <div>
        <input type="text" class="form-control" />
        <button class="btn add-new-word btn-sm btn-warning text-white mt-1"> Добавить новое слово </button>
    </div>
</template>

@section Scripts {
    <script>
        (function () {

            let audio = new Audio();

            let availableWordsArea = document.getElementById('available-words');

            document.addEventListener('click', function (evt) {
                let targetElement = evt.target;

            if (targetElement.classList.contains('add-own-word-button')) {
                addOwnWordButton(targetElement);
                return;
            }

            if (targetElement.classList.contains('add-word-button')) {
                loadTranslationList();
                return;
            }

            if (targetElement.classList.contains('audio')) {
                playAudio(targetElement);
                return;
            }

            do {
                if (targetElement == availableWordsArea) return;
                targetElement = targetElement.parentNode;
            } while (targetElement);

            availableWordsArea.innerHTML = '';
            availableWordsArea.classList.add('d-none');

        });

        var input = document.querySelector("#find-input");
        input.addEventListener("input", function (event) {
            toogleButton(this.value);
            refreshArea(this.value);
        }, false);

        function playAudio(button) {

                if (button.nodeName == "I") {
                    button = button.parentElement;
                }

                let lang = button.classList.contains('translation') ? 2 : 1;
                $.ajax({
                    url: '@Url.Action("GetAudio", "Vocabulary")',
                    type: 'GET',
                    data: { word: button.previousElementSibling.innerText, language: lang },
                    success: function (res) {
                    audio.src = '';
                    audio.src = res;
                    audio.play();
                }
            })
        }


        function addOwnWordButton(btn) {
            var template = document.getElementById('addOwnWordTemplate').cloneNode(true);
            console.log(btn);
            console.log(btn.parentElement);
            console.log(template.content);
            btn.parentElement.replaceChild(template.content, btn);
        }




        $(document).on('click', '.add-new-word', function () {

            var translation = this.previousElementSibling.value;
            $.ajax({
                url: '@Url.Action("AddOwnTranslation", "Vocabulary")',
                type: 'POST',
                data: { word: input.value, translation: translation },
                success: function (res) {
                     location.reload();
                }
            })
        });



        $(document).on('click', '.translation-word', function () {
            $.ajax({
                url: '@Url.Action("AddWord", "Vocabulary")',
                type: 'POST',
                data: { word: input.value, translation: this.innerText },
                success: function (res) {
                     location.reload();
                }
            })
        });

        $(document).on('click', '.delete-button', function () {

            let wordName = this.parentElement.parentElement.querySelector(".wordName").innerText;
            let wordTranslation = this.parentElement.parentElement.querySelector(".wordTranslation").innerText;
            $.ajax({
                url: '@Url.Action("RemoveWord", "Vocabulary")',
                type: 'POST',
                data: { word: wordName, translation: wordTranslation },
                success: function (res) {
                     location.reload();
                }
            })
        });


        function loadTranslationList() {
            availableWordsArea.classList.remove('d-none');
            $.ajax({
                url: '@Url.Action("TranslationList", "Vocabulary")',
                type: 'GET',
                data: { word: input.value },
                success: (res) => {
                    var area = document.querySelector('#available-words');
                    area.innerHTML = res;
                }
            });
        }

        function toogleButton(str) {
            let button = document.querySelector(".add-word-button");
            if (str.length > 0) {
                button.style.visibility = "visible";
            } else {
                button.style.visibility = "hidden";
            }
        }

        function refreshArea(str) {
            $.ajax({
                url: '@Url.Action("WordList", "Vocabulary")',
                type: 'GET',
                data: { mask: str },
                success: (res) => {
                    var refreshArea = document.querySelector("#partial");
                    refreshArea.innerHTML = res;
                }
            });
        }
    })();
</script>
}
